# 工作流的友好名称，会显示在 GitHub Actions 的 UI 中。
name: Build & Push Docker image to Docker Hub

# 定义触发此工作流的事件。
on:
  # 允许从 Actions 标签页手动触发，并可选择性输入 tag。
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker Tag'
        required: false
        default: 'latest'
        type: string

  # 在 main 或 master 分支有 push 时触发。
  push:
    branches: [ main, master ]

  # 在目标为 main 或 master 分支的 pull request 时触发。
  pull_request:
    branches: [ main, master ]

# 定义全局环境变量，方便统一管理镜像名称。
env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/shiyutv

# 并发设置，确保每个分支同一时间只有一个工作流在运行。
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 指定工作流中任务所需的权限。
permissions:
  contents: write
  actions: write

# 包含要执行的任务。
jobs:
  # 任务一：专门用于构建和推送 amd64 平台的镜像，速度极快。
  build-amd64:
    name: Build for linux/amd64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for labels and tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.event.inputs.tag || 'latest' }}-amd64

      - name: Build and push amd64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache-amd64
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache-amd64,mode=max

  # 任务二：专门用于构建和推送 arm64 平台的镜像，并行执行。
  build-arm64:
    name: Build for linux/arm64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for labels and tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.event.inputs.tag || 'latest' }}-arm64

      - name: Build and push arm64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache-arm64
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache-arm64,mode=max

  # 任务三：等待两个平台构建完成后，将它们合并成一个多架构清单。
  push-manifest:
    name: Push Multi-arch Manifest
    runs-on: ubuntu-latest
    # 必须在两个 build 任务成功后才执行。
    needs: [build-amd64, build-arm64]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Create and push multi-arch manifest
        run: |
          TAG=${{ github.event.inputs.tag || 'latest' }}
          docker manifest create ${{ env.IMAGE_NAME }}:${TAG} \
            --amend ${{ env.IMAGE_NAME }}:${TAG}-amd64 \
            --amend ${{ env.IMAGE_NAME }}:${TAG}-arm64
          docker manifest push ${{ env.IMAGE_NAME }}:${TAG}

  # 清理任务：等待最终的 'push-manifest' 任务。
  cleanup-refresh:
    runs-on: ubuntu-latest
    # 等待 'push-manifest' 任务完成，无论成功与否。
    needs:
      - push-manifest
    # 确保无论构建是否成功，这个清理任务都会运行。
    if: always()
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 2
